#!/usr/bin/env node
import {$} from 'zx'
import * as changeCase from 'change-case'
import {parseMdLink} from './utils.js'
import fs from 'fs/promises'

const issue = process.argv[2]

if (!issue) {
  throw new Error('Issue number is required')
}

const body = (await $`gh issue view ${issue} --json body`).stdout.trim()

const parsed = JSON.parse(body).body

function parseContent(content) {
  const segments = []
  const splitContent = content.split('\n').filter(line => line.trim() !== '')

  let currentLabel = ''
  let currentContent = []

  splitContent.forEach(line => {
    if (line.startsWith('###')) {
      if (currentLabel !== '') {
        segments.push({label: currentLabel, content: currentContent})
        currentContent = []
      }
      currentLabel = line.substring(3).trim()
    } else {
      currentContent.push(line.trim())
    }
  })

  if (currentLabel !== '') {
    segments.push({label: currentLabel, content: currentContent})
  }

  return segments
}

const content = parseContent(parsed)
const noResponse = '_No response_'
const setKey = v => changeCase.camelCase(v.trim().toLowerCase().replace('(optional)', ''))

const data = Object.fromEntries(
  content
    .map(value => {
      const key = setKey(value.label)
      const content = value.content.join('\n')
      if (content === noResponse) {
        return undefined
      }
      return [key, parseMdLink(content) || content]
    })
    .filter(v => v),
)

if (process.env.CI && process.env.GITHUB_OUTPUT) {
  const outputString = Object.entries(data)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n')
  await fs.writeFile(process.env.GITHUB_OUTPUT, outputString)
} else {
  process.stdout.write(JSON.stringify(object))
}
