name: Issue to PR

on:
  issues:
    types: [opened, reopened]

jobs:
  createPR:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Check Issue Title
        run: |
          if [[ "${{ github.event.issue.title }}" != "[Speaker]*" ]]; then
            echo "Issue does not start with [Speaker]. Exiting..."
            exit 0
          fi

      - name: Issue Forms Body Parser
        id: parse
        uses: zentered/issue-forms-body-parser@v2.0.0

      - name: Issue Definitions
        id: define
        run: |
          echo '${{ steps.parse.outputs.data }}'

          name=$(echo '${{ steps.parse.outputs.data }}' | jq -r '.name.text')
          echo "name=$name" >> "$GITHUB_OUTPUT"
          echo "$name"
    
          gitHubUsername=$(echo '${{ steps.parse.outputs.data }}' | jq -r '."git-hub-username".text')
          echo "gitHubUsername=$gitHubUsername" >> "$GITHUB_OUTPUT"
          echo "$gitHubUsername"
    
          linkedInProfileURL=$(echo '${{ steps.parse.outputs.data }}' | jq -r '".linked-in-profile-url".text')
          echo "linkedInProfileURL=$linkedInProfileURL" >> "$GITHUB_OUTPUT"
          echo "$linkedInProfileURL"
    
          website=$(echo '${{ steps.parse.outputs.data }}' | jq -r '.website.text')
          echo "website=$website" >> "$GITHUB_OUTPUT"
          echo "$website"
    
          profileImage=$(echo '${{ steps.parse.outputs.data }}' | jq -r '."profile-image".text')
          echo "profileImage=$profileImage" >> "$GITHUB_OUTPUT"
          echo "$profileImage"

      - name: Create Slug
        id: slug
        run: |
          echo "slug=$(echo '${{ steps.define.outputs.name }}' | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-zA-Z0-9]/-/g' -e 's/--*/-/g')" >> $GITHUB_OUTPUT

      - name: Create new speaker file
        run: |
          echo "---" > ./src/content/speakers/${{ steps.slug.outputs.slug }}.md

          add_url() {
            property_name=$1
            property_value=$2
            if [[ -n "$property_value" && "$property_value" =~ ^https?://[^\s/$.?#].[^\s]*$ ]]; then
              property_value=$(echo "$property_value" | sed 's/[<>]//g')
              echo "$property_name: $property_value" >> ./src/content/speakers/${{ steps.slug.outputs.slug }}.md
            fi
          }

          # Check if githubUsername is not empty
          if [ -n "${{  steps.define.outputs.githubUsername }}" ]; then
            githubUsername=$(echo '${{ steps.define.outputs.githubUsername }}' | sed 's/@//g')
            echo "githubUsername: $githubUsername" >> ./src/content/speakers/${{ steps.slug.outputs.slug }}.md
          fi

          add_url("linkedInProfileURL", "${{ steps.define.outputs.linkedInProfileURL }}")
          add_url("profileImage", "${{ steps.define.outputs.profileImage }}")

          # Check if name is not empty
          if [ -n "${{  steps.define.outputs.name }}" ]; then
            echo "name: ${{  steps.define.outputs.name }}" >> ./src/content/speakers/${{ steps.slug.outputs.slug }}.md
          fi

          add_url("website", "${{ steps.define.outputs.website }}")

          echo "---" >> ./src/content/speakers/${{ steps.slug.outputs.slug }}.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: 'New Speaker Submission: ${{  steps.define.outputs.name }} (#${{ github.event.issue.number }})'
          title: 'New Speaker Submission: ${{  steps.define.outputs.name }}'
          body: |
            Adds a new speaker based on issue #${{ github.event.issue.number }}.
          branch: 'new-speaker-${{ steps.slug.outputs.slug }}-${{ github.run_id }}'
