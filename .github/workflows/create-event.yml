name: Create Event

on:
  issues:
    types: [opened, reopened]
  workflow_call:
    inputs:
      date:
        type: string
        description: 'Event Date (YYYY-MM-DD)'
        required: false
      meetup:
        type: string
        description: 'Meetup Link'
        required: false
      presentationTitle:
        type: string
        description: 'Presentation Title'
        required: false
      eventTitle:
        type: string
        description: 'Event Title'
        required: false
      website:
        type: string
        description: 'Website'
        required: false
  workflow_dispatch:
    inputs:
      date:
        type: string
        description: 'Event Date (YYYY-MM-DD)'
        required: false
      meetup:
        type: string
        description: 'Meetup Link'
        required: false
      presentationTitle:
        type: string
        description: 'Presentation Title'
        required: false
      eventTitle:
        type: string
        description: 'Event Title'
        required: false
      website:
        type: string
        description: 'Website'
        required: false

jobs:
  capture-json:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20' # Set this to the node version you are using

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm i

      - name: Run script and capture output
        id: issueForm
        run: ./script/commentbody ${{ github.event.issue.number }}

      - name: Set output
        id: data
        env:
          A: ${{ toJSON(steps.issueForm.outputs) }}
          B: ${{ toJSON(github.event.inputs) }}
        run: ./script/mergejson "$A" "$B"

      - name: Operation
        run: |
          npm install
          ./script/mkall \
            --updateAll \
            --date "${{ steps.data.outputs.date }}" \
            --githubUsername "${{ steps.data.outputs.githubUsername }}" \
            --googleCal "${{ steps.data.outputs.googleCal }}" \
            --ical "${{ steps.data.outputs.ical }}" \
            --linkedin "${{ steps.data.outputs.linkedin }}" \
            --meetup "${{ steps.data.outputs.meetup }}" \
            --name "${{ steps.data.outputs.name }}" \
            --presentations "${{ steps.data.outputs.presentations }}" \
            --profileImage "${{ steps.data.outputs.profileImage }}" \
            --slides "${{ steps.data.outputs.slides }}" \
            --slidesSource "${{ steps.data.outputs.slidesSource }}" \
            --presentationTitle "${{ steps.data.outputs.presentationTitle }}" \
            --eventTitle "${{ steps.data.outputs.eventTitle }}" \
            --website "${{ steps.data.outputs.website }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git checkout -b "content-${{ github.run_id }}"
          git commit -m "Automated Content Changes"
          git push origin "content-${{ github.run_id }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Automated Content Changes
          title: Automated Content Changes
          body: Automated Content Changes
          branch: 'content-${{ github.run_id }}'
